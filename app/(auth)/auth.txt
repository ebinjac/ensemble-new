// app/(auth)/actions/auth.ts
'use server';

import { cookies } from 'next/headers';

import { db } from '@/db';
import { teams } from '@/db/schema/teams';
import { eq, or } from 'drizzle-orm';
import type { SSOUser, AuthResponse, TeamAccess } from '@/app/types/auth';
import { getUserTeamAccess } from '../lib/team-utils';
import { StatelessSessionManager } from '../lib/token';

export async function handleSSOCallback(
  userData: SSOUser,
  deviceInfo?: string,
  ipAddress?: string
): Promise<{ success: boolean; error?: string; data?: AuthResponse }> {
  console.log('üöÄ Starting SSO callback for user:', userData.attributes.email);
  
  try {
    // Get user's team access using the shared utility
    const teamAccess = await getUserTeamAccess(userData.attributes.groups);
    console.log('üìä Found team access for', teamAccess.length, 'teams');

    // Create session data
    const sessionData = {
      user: {
        firstName: userData.attributes.firstName,
        lastName: userData.attributes.lastName,
        fullName: userData.attributes.fullName,
        adsId: userData.attributes.adsId,
        guid: userData.attributes.guid,
        employeeId: userData.attributes.employeeId,
        email: userData.attributes.email,
      },
      teams: teamAccess,
      deviceInfo: deviceInfo || 'unknown',
      ipAddress: ipAddress || 'unknown',
    };

    // Create encrypted session tokens
    const tokens = await StatelessSessionManager.createSession(sessionData);
    
    // Set secure HTTP-only cookies
    const cookieStore = await cookies();
    const isProduction = process.env.NODE_ENV === 'production';
    
    cookieStore.set('auth-token', tokens.accessToken, {
      httpOnly: true,
      secure: isProduction,
      sameSite: 'lax',
      path: '/',
      maxAge: 24 * 60 * 60, // 24 hours
    });

    cookieStore.set('refresh-token', tokens.refreshToken, {
      httpOnly: true,
      secure: isProduction,
      sameSite: 'lax',
      path: '/',
      maxAge: 7 * 24 * 60 * 60, // 7 days
    });

    console.log('üç™ Cookies set successfully');

    return {
      success: true,
      data: {
        user: userData,
        teams: teamAccess,
        expiresAt: tokens.expiresAt,
      }
    };
    
  } catch (error) {
    console.error('‚ùå SSO callback error:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Authentication failed' 
    };
  }
}

export async function refreshAuthToken(): Promise<{ success: boolean; error?: string }> {
  try {
    console.log('üîÑ Attempting to refresh auth token...');
    
    const cookieStore = await cookies();
    const refreshToken = cookieStore.get('refresh-token');
    
    if (!refreshToken) {
      console.log('‚ùå No refresh token found');
      return { success: false, error: 'No refresh token found' };
    }

    // Use the StatelessSessionManager to refresh the session
    const result = await StatelessSessionManager.refreshSession(refreshToken.value);
    
    if (!result) {
      console.log('‚ùå Refresh token is invalid or expired');
      // Clear invalid cookies
      cookieStore.delete('auth-token');
      cookieStore.delete('refresh-token');
      return { success: false, error: 'Invalid or expired refresh token' };
    }

    // Set the new access token cookie
    const isProduction = process.env.NODE_ENV === 'production';
    cookieStore.set('auth-token', result.accessToken, {
      httpOnly: true,
      secure: isProduction,
      sameSite: 'lax',
      path: '/',
      maxAge: 24 * 60 * 60, // 24 hours
    });

    console.log('‚úÖ Access token refreshed successfully');
    return { success: true };
    
  } catch (error) {
    console.error('‚ùå Token refresh error:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Token refresh failed' 
    };
  }
}

export async function logout(): Promise<void> {
  try {
    console.log('üö™ Logging out user...');
    const cookieStore = await cookies();
    cookieStore.delete('auth-token');
    cookieStore.delete('refresh-token');
    console.log('‚úÖ User logged out successfully');
  } catch (error) {
    console.error('‚ùå Logout error:', error);
  }
}

// Debug function to check refresh token status
export async function debugRefreshToken(): Promise<{
  hasRefreshToken: boolean;
  refreshTokenValid: boolean;
  error?: string;
}> {
  try {
    const cookieStore = await cookies();
    const refreshToken = cookieStore.get('refresh-token');
    
    if (!refreshToken) {
      return { hasRefreshToken: false, refreshTokenValid: false };
    }

    const result = await StatelessSessionManager.refreshSession(refreshToken.value);
    
    return {
      hasRefreshToken: true,
      refreshTokenValid: !!result,
    };
  } catch (error) {
    return {
      hasRefreshToken: true,
      refreshTokenValid: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}


// hooks/useTokenRefresh.ts
'use client';

import { useEffect, useCallback, useState } from 'react';
import { refreshAuthToken } from '../actions/auth';


export function useTokenRefresh() {
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);

  const refreshToken = useCallback(async () => {
    if (isRefreshing) {
      console.log('üîÑ Refresh already in progress, skipping...');
      return false;
    }

    setIsRefreshing(true);
    
    try {
      console.log('üîÑ Refreshing auth token...');
      const result = await refreshAuthToken();
      
      if (result.success) {
        console.log('‚úÖ Token refreshed successfully');
        setLastRefresh(new Date());
        return true;
      } else {
        console.log('‚ùå Token refresh failed:', result.error);
        // Could trigger logout or redirect to login page
        return false;
      }
    } catch (error) {
      console.error('‚ùå Token refresh error:', error);
      return false;
    } finally {
      setIsRefreshing(false);
    }
  }, [isRefreshing]);

  // Set up automatic token refresh
  useEffect(() => {
    // Refresh token every 14 minutes (1 minute before expiry)
    const interval = setInterval(refreshToken, 14 * 60 * 1000);
    
    console.log('‚è∞ Token refresh interval set up (14 minutes)');
    
    return () => {
      clearInterval(interval);
      console.log('‚è∞ Token refresh interval cleared');
    };
  }, [refreshToken]);

  return { 
    refreshToken, 
    isRefreshing, 
    lastRefresh 
  };
}


// app/(auth)/hooks/useSSOPolicy.ts

import { useEffect, useState } from 'react';
import type { SSOUser } from '@/app/types/auth';

// Mock SSO user data for development
const mockSSOUser: SSOUser = {
  attributes: {
    firstName: "Ensemble",
    lastName: "Test",
    fullName: "Ensemble Test",
    adsId: "ensemble",
    guid: "@fca9376056149663519865855188315",
    employeeId: "8229989",
    email: "ensemble.test@daexp.com",
    groups: ["SSO_ENSEMBLE_E1"]
  }
};

export function useSSOPolicy() {
  const [user, setUser] = useState<SSOUser | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    // Simulate SSO callback delay
    const timer = setTimeout(() => {
      try {
        // In development, always return mock user
        if (process.env.NODE_ENV === 'development') {
          setUser(mockSSOUser);
        }
        // In production, this would get real SSO data
        setLoading(false);
      } catch (err) {
        setError(err instanceof Error ? err : new Error('Failed to get SSO data'));
        setLoading(false);
      }
    }, 500);

    return () => clearTimeout(timer);
  }, []);

  return { user, loading, error };
} 

// app/(auth)/lib/auth.ts
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import { StatelessSessionManager, type SessionPayload } from '@/app/(auth)/lib/token';
import type { TeamAccess } from '@/app/types/auth';

export type AuthUser = {
  user: SessionPayload | null;
  isAuthenticated: boolean;
};

export type FormattedUser = {
  id: string;
  name: string;
  email: string;
  firstName: string;
  lastName: string;
  employeeId: string;
  adsId: string;
  image?: string;
};

export type FormattedTeam = {
  id: string;
  name: string;
  role: 'admin' | 'user';
};

/**
 * Gets the authenticated user from the encrypted JWT token (READ-ONLY)
 * @param redirectOnFailure - Whether to redirect to home page on auth failure
 * @returns The authenticated user or null
 */
export async function getServerUser(redirectOnFailure = true): Promise<AuthUser> {
  try {
    const cookieStore = await cookies();
    const authToken = cookieStore.get('auth-token');

    if (!authToken) {
      if (redirectOnFailure) redirect('/');
      return { user: null, isAuthenticated: false };
    }

    const sessionData = await StatelessSessionManager.verifySession(authToken.value);
    
    if (!sessionData) {
      if (redirectOnFailure) redirect('/');
      return { user: null, isAuthenticated: false };
    }

    // DON'T update cookies here - just return the session data
    return { user: sessionData, isAuthenticated: true };
    
  } catch (error) {
    console.error('Auth error:', error);
    if (redirectOnFailure) redirect('/');
    return { user: null, isAuthenticated: false };
  }
}

/**
 * Get formatted user data for UI components (READ-ONLY)
 */
export async function getFormattedUserData(): Promise<{
  user: FormattedUser | null;
  teams: FormattedTeam[];
  isAuthenticated: boolean;
}> {
  const { user: sessionUser, isAuthenticated } = await getServerUser(false);

  if (!isAuthenticated || !sessionUser) {
    return {
      user: null,
      teams: [],
      isAuthenticated: false,
    };
  }

  const formattedUser: FormattedUser = {
    id: sessionUser.user.employeeId,
    name: sessionUser.user.fullName,
    email: sessionUser.user.email,
    firstName: sessionUser.user.firstName,
    lastName: sessionUser.user.lastName,
    employeeId: sessionUser.user.employeeId,
    adsId: sessionUser.user.adsId,
    image: undefined,
  };

  const formattedTeams: FormattedTeam[] = sessionUser.teams.map(team => ({
    id: team.teamId,
    name: team.teamName,
    role: team.role,
  }));

  return {
    user: formattedUser,
    teams: formattedTeams,
    isAuthenticated: true,
  };
}

/**
 * Middleware to ensure user is authenticated
 */
export async function requireAuth(): Promise<SessionPayload> {
  const { user, isAuthenticated } = await getServerUser(true);
  
  if (!isAuthenticated || !user) {
    redirect('/');
  }

  return user;
}

/**
 * Check if user is authenticated without redirecting
 */
export async function checkAuth(): Promise<boolean> {
  const { isAuthenticated } = await getServerUser(false);
  return isAuthenticated;
}

/**
 * Check if user has access to a specific team
 */
export async function checkTeamAccess(teamId: string): Promise<{
  hasAccess: boolean;
  role?: 'admin' | 'user';
}> {
  const { user } = await getServerUser(false);
  
  if (!user) {
    return { hasAccess: false };
  }

  const teamAccess = user.teams.find(team => team.teamId === teamId);
  
  return {
    hasAccess: !!teamAccess,
    role: teamAccess?.role,
  };
}

/**
 * Require team access for a specific team
 */
export async function requireTeamAccess(teamId: string, p0: { admin: boolean; }): Promise<{
  user: SessionPayload;
  role: 'admin' | 'user';
}> {
  const user = await requireAuth();
  const teamAccess = user.teams.find(team => team.teamId === teamId);
  
  if (!teamAccess) {
    redirect('/unauthorized');
  }

  return {
    user,
    role: teamAccess.role,
  };
}


// lib/team-utils.ts
import { db } from '@/db';
import { teams } from '@/db/schema/teams';
import { eq, or } from 'drizzle-orm';
import type { TeamAccess } from '@/app/types/auth';

// Cache team access queries in-memory
const teamAccessCache = new Map<string, { data: TeamAccess[], expiry: number }>();

export async function getUserTeamAccess(userGroups: string[]): Promise<TeamAccess[]> {
  const cacheKey = userGroups.sort().join(',');
  const cached = teamAccessCache.get(cacheKey);
  
  // Check cache (5-minute expiry)
  if (cached && cached.expiry > Date.now()) {
    return cached.data;
  }

  try {
    const matchingTeams = await db
      .select({
        id: teams.id,
        teamName: teams.teamName,
        userGroup: teams.userGroup,
        adminGroup: teams.adminGroup,
      })
      .from(teams)
      .where(
        or(
          ...userGroups.map(group =>
            or(
              eq(teams.userGroup, group),
              eq(teams.adminGroup, group)
            )
          )
        )
      );

    const teamAccess: TeamAccess[] = matchingTeams.map(team => {
      const isAdmin = userGroups.includes(team.adminGroup);
      return {
        teamId: team.id,
        teamName: team.teamName,
        role: isAdmin ? 'admin' : 'user'
      };
    });

    // Cache for 5 minutes
    teamAccessCache.set(cacheKey, {
      data: teamAccess,
      expiry: Date.now() + 5 * 60 * 1000
    });

    return teamAccess;
  } catch (error) {
    console.error('Failed to get user team access:', error);
    return [];
  }
}

export function clearTeamAccessCache(): void {
  teamAccessCache.clear();
}


// app/(auth)/lib/token-manager.ts
import { SignJWT, jwtVerify } from 'jose';
import CryptoJS from 'crypto-js';
import { z } from 'zod';

// Only import team utils if not in Edge Runtime
let getUserTeamAccess: (() => any) | null = null;

if (typeof (globalThis as any).EdgeRuntime === 'undefined') {
  try {
    // Use dynamic import for better compatibility and type safety
    // Note: This must remain sync for legacy reasons, so require is used
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const teamUtilsModule = require('./team-utils');
    getUserTeamAccess = teamUtilsModule.getUserTeamAccess;
  } catch (error) {
    console.warn('Team utils import failed - running in restricted environment');
  }
}

// Environment validation
const envSchema = z.object({
  JWT_SECRET: z.string().min(32, 'JWT_SECRET must be at least 32 characters'),
  JWT_REFRESH_SECRET: z.string().min(32, 'JWT_REFRESH_SECRET must be at least 32 characters'),
  SESSION_ENCRYPTION_KEY: z.string().min(32, 'SESSION_ENCRYPTION_KEY must be at least 32 characters'),
});

console.log('üîç Validating environment variables...');
let env: { JWT_SECRET: string; JWT_REFRESH_SECRET: string; SESSION_ENCRYPTION_KEY: string; };
try {
  env = envSchema.parse(process.env);
  console.log('‚úÖ Environment variables validated successfully');
} catch (error) {
  console.error('‚ùå Environment variable validation failed:', error);
  throw new Error('Missing or invalid environment variables for JWT');
}

const JWT_SECRET = new TextEncoder().encode(env.JWT_SECRET);
const JWT_REFRESH_SECRET = new TextEncoder().encode(env.JWT_REFRESH_SECRET);

export type SessionPayload = {
  user: {
    firstName: string;
    lastName: string;
    fullName: string;
    adsId: string;
    guid: string;
    employeeId: string;
    email: string;
  };
  teams: Array<{
    teamId: string;
    teamName: string;
    role: 'admin' | 'user';
  }>;
  sessionId: string;
  lastActivity: number;
  deviceInfo?: string;
  ipAddress?: string;
};

export type RefreshTokenPayload = {
  sessionId: string;
  userId: string;
  userContext: {
    firstName: string;
    lastName: string;
    fullName: string;
    adsId: string;
    guid: string;
    employeeId: string;
    email: string;
    groups: string[];
    deviceInfo?: string;
  };
};

export class StatelessSessionManager {
  private static readonly ACCESS_TOKEN_EXPIRES = '15m';
  private static readonly REFRESH_TOKEN_EXPIRES = '7d';
  private static readonly SESSION_TIMEOUT = 8 * 60 * 60 * 1000; // 8 hours in ms

  // Encrypt session data before storing in JWT
  private static encryptSessionData(data: SessionPayload): string {
    try {
      const encrypted = CryptoJS.AES.encrypt(JSON.stringify(data), env.SESSION_ENCRYPTION_KEY).toString();
      console.log('üîê Session data encrypted successfully');
      return encrypted;
    } catch (error) {
      console.error('‚ùå Failed to encrypt session data:', error);
      throw new Error('Session encryption failed');
    }
  }

  // Decrypt session data from JWT
  private static decryptSessionData(encryptedData: string): SessionPayload | null {
    try {
      const bytes = CryptoJS.AES.decrypt(encryptedData, env.SESSION_ENCRYPTION_KEY);
      const decryptedData = bytes.toString(CryptoJS.enc.Utf8);
      const parsed = JSON.parse(decryptedData);
      console.log('üîì Session data decrypted successfully');
      return parsed;
    } catch (error) {
      console.error('‚ùå Failed to decrypt session data:', error);
      return null;
    }
  }

  static async createSession(sessionData: Omit<SessionPayload, 'sessionId' | 'lastActivity'>): Promise<{
    accessToken: string;
    refreshToken: string;
    expiresAt: number;
  }> {
    try {
      const sessionId = CryptoJS.lib.WordArray.random(32).toString();
      const now = Date.now();
      
      console.log('üîê Creating session for user:', sessionData.user.email);
      
      const payload: SessionPayload = {
        ...sessionData,
        sessionId,
        lastActivity: now,
      };

      // Encrypt the session payload
      const encryptedPayload = this.encryptSessionData(payload);

      // Create refresh token payload with user context
      const refreshTokenPayload: RefreshTokenPayload = {
        sessionId,
        userId: sessionData.user.email,
        userContext: {
          firstName: sessionData.user.firstName,
          lastName: sessionData.user.lastName,
          fullName: sessionData.user.fullName,
          adsId: sessionData.user.adsId,
          guid: sessionData.user.guid,
          employeeId: sessionData.user.employeeId,
          email: sessionData.user.email,
          groups: sessionData.teams.map(team => team.teamName),
          deviceInfo: sessionData.deviceInfo,
        }
      };

      console.log('üîë Creating JWT tokens...');

      const [accessToken, refreshToken] = await Promise.all([
        new SignJWT({ data: encryptedPayload })
          .setProtectedHeader({ alg: 'HS256' })
          .setIssuedAt()
          .setExpirationTime(this.ACCESS_TOKEN_EXPIRES)
          .setJti(sessionId)
          .sign(JWT_SECRET),
        
        new SignJWT(refreshTokenPayload)
          .setProtectedHeader({ alg: 'HS256' })
          .setIssuedAt()
          .setExpirationTime(this.REFRESH_TOKEN_EXPIRES)
          .sign(JWT_REFRESH_SECRET)
      ]);

      console.log('‚úÖ JWT tokens created successfully');

      return {
        accessToken,
        refreshToken,
        expiresAt: now + (24 * 60 * 60 * 1000), // 24 hours
      };
    } catch (error) {
      if (error instanceof Error) {
        console.error('‚ùå Failed to create session:', error);
        throw new Error(`Session creation failed: ${error.message}`);
      } else {
        console.error('‚ùå Failed to create session:', error);
        throw new Error('Session creation failed: Unknown error');
      }
    }
  }

  static async verifySession(token: string): Promise<SessionPayload | null> {
    try {
      console.log('üîç Verifying session token...');
      
      const { payload } = await jwtVerify(token, JWT_SECRET);
      const encryptedData = payload.data as string;
      
      if (!encryptedData) {
        console.error('‚ùå No encrypted data in token');
        return null;
      }
      
      const sessionData = this.decryptSessionData(encryptedData);
      if (!sessionData) {
        console.error('‚ùå Failed to decrypt session data');
        return null;
      }

      // Check if session has expired
      const now = Date.now();
      if (now - sessionData.lastActivity > this.SESSION_TIMEOUT) {
        console.error('‚ùå Session has expired due to inactivity');
        return null;
      }

      console.log('‚úÖ Session verified successfully for user:', sessionData.user.email);
      return sessionData;
    } catch (error) {
      console.error('‚ùå Session verification failed:', error);
      return null;
    }
  }

  static async refreshSession(refreshToken: string): Promise<{
    accessToken: string;
    expiresAt: number;
  } | null> {
    try {
      console.log('üîÑ Starting session refresh...');
      
      // Verify and decode refresh token
      const { payload } = await jwtVerify(refreshToken, JWT_REFRESH_SECRET);
      const refreshPayload = payload as unknown as RefreshTokenPayload;
      
      const { sessionId, userId, userContext } = refreshPayload;
      
      console.log('üîç Refresh token verified for user:', userId);

      // Get current team access using stored groups (if available)
      let teams = [];
      if (getUserTeamAccess) {
        console.log('üë• Fetching current team access for groups:', userContext.groups);
        teams = await getUserTeamAccess();
      } else {
        console.warn('‚ö†Ô∏è Database unavailable - using cached team data from refresh token');
        // Fallback: reconstruct teams from refresh token groups
        teams = userContext.groups.map((groupName: string) => ({
          teamId: `fallback-${groupName}`,
          teamName: groupName,
          role: 'user' as const
        }));
      }

      // Reconstruct session data
      const sessionData: SessionPayload = {
        user: {
          firstName: userContext.firstName,
          lastName: userContext.lastName,
          fullName: userContext.fullName,
          adsId: userContext.adsId,
          guid: userContext.guid,
          employeeId: userContext.employeeId,
          email: userContext.email,
        },
        teams,
        sessionId,
        lastActivity: Date.now(),
        deviceInfo: userContext.deviceInfo,
      };

      // Create new access token
      const encryptedPayload = this.encryptSessionData(sessionData);
      const now = Date.now();

      const newAccessToken = await new SignJWT({ data: encryptedPayload })
        .setProtectedHeader({ alg: 'HS256' })
        .setIssuedAt()
        .setExpirationTime(this.ACCESS_TOKEN_EXPIRES)
        .setJti(sessionId)
        .sign(JWT_SECRET);

      console.log('‚úÖ New access token created successfully');

      return {
        accessToken: newAccessToken,
        expiresAt: now + (24 * 60 * 60 * 1000), // 24 hours
      };
    } catch (error) {
      console.error('‚ùå Session refresh failed:', error);
      return null;
    }
  }

  static async updateSession(currentToken: string, updates: Partial<SessionPayload>): Promise<string | null> {
    try {
      const currentSession = await this.verifySession(currentToken);
      if (!currentSession) return null;

      const updatedSession = { 
        ...currentSession, 
        ...updates, 
        lastActivity: Date.now() 
      };
      
      const encryptedPayload = this.encryptSessionData(updatedSession);

      const newToken = await new SignJWT({ data: encryptedPayload })
        .setProtectedHeader({ alg: 'HS256' })
        .setIssuedAt()
        .setExpirationTime(this.ACCESS_TOKEN_EXPIRES)
        .setJti(updatedSession.sessionId)
        .sign(JWT_SECRET);

      return newToken;
    } catch (error) {
      console.error('‚ùå Session update failed:', error);
      return null;
    }
  }
}


// app/(auth)/components/AuthProvider.tsx
'use client';

import { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { useSSOPolicy } from '@/app/(auth)/hooks/useSSOPolicy';
import { useTokenRefresh } from '@/app/(auth)/hooks/useRefreshToken';
import type { FormattedUser, FormattedTeam } from '@/app/(auth)/lib/auth';
import { handleSSOCallback } from '@/app/(auth)/actions/auth';

type AuthContextType = {
  user: FormattedUser | null;
  teams: FormattedTeam[];
  isAuthenticated: boolean;
  loading: boolean;
  error: string | null;
  hasTeamAccess: (teamId: string) => boolean;
  isTeamAdmin: (teamId: string) => boolean;
  getTeamRole: (teamId: string) => 'admin' | 'user' | null;
  login: () => Promise<void>;
  logout: () => Promise<void>;
  refreshAuth: () => Promise<void>;
  lastRefresh: Date | null;
  isRefreshing: boolean;
};

const AuthContext = createContext<AuthContextType | null>(null);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  // SSO hook for fetching user data
  const { user: ssoUser, loading: ssoLoading, error: ssoError } = useSSOPolicy();
  
  // Token refresh hook
  const { refreshToken, isRefreshing, lastRefresh } = useTokenRefresh();
  
  // Auth state
  const [user, setUser] = useState<FormattedUser | null>(null);
  const [teams, setTeams] = useState<FormattedTeam[]>([]);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [authLoading, setAuthLoading] = useState(false);
  const [authError, setAuthError] = useState<string | null>(null);
  const [isClient, setIsClient] = useState(false);

  // Ensure we're client-side before doing anything
  useEffect(() => {
    setIsClient(true);
  }, []);

  // Helper functions
  const hasTeamAccess = useCallback((teamId: string) => {
    return teams.some(team => team.id === teamId);
  }, [teams]);

  const isTeamAdmin = useCallback((teamId: string) => {
    return teams.some(team => team.id === teamId && team.role === 'admin');
  }, [teams]);

  const getTeamRole = useCallback((teamId: string) => {
    const team = teams.find(team => team.id === teamId);
    return team?.role || null;
  }, [teams]);

  // Process SSO authentication
  const processAuthentication = useCallback(async () => {
    if (!ssoUser) return;

    setAuthLoading(true);
    setAuthError(null);

    try {
      const deviceInfo = navigator.userAgent;
      const result = await handleSSOCallback(ssoUser, deviceInfo);
      
      if (result.success && result.data) {
        // Map the response to our formatted types
        const formattedUser: FormattedUser = {
          id: result.data.user.attributes.employeeId,
          name: result.data.user.attributes.fullName,
          email: result.data.user.attributes.email,
          firstName: result.data.user.attributes.firstName,
          lastName: result.data.user.attributes.lastName,
          employeeId: result.data.user.attributes.employeeId,
          adsId: result.data.user.attributes.adsId,
          image: undefined,
        };

        const formattedTeams: FormattedTeam[] = result.data.teams.map(team => ({
          id: team.teamId,
          name: team.teamName,
          role: team.role,
        }));

        setUser(formattedUser);
        setTeams(formattedTeams);
        setIsAuthenticated(true);
        
        console.log('‚úÖ Authentication successful:', formattedUser.name);
        console.log('üë• User teams:', formattedTeams.length);
      } else {
        throw new Error(result.error || 'Authentication failed');
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Authentication failed';
      setAuthError(errorMessage);
      setIsAuthenticated(false);
      setUser(null);
      setTeams([]);
      console.error('‚ùå Authentication error:', errorMessage);
    } finally {
      setAuthLoading(false);
    }
  }, [ssoUser]);

  // Handle SSO user changes
  useEffect(() => {
    if (isClient && ssoUser && !ssoLoading && !isAuthenticated && !authLoading) {
      console.log('üîÑ SSO user available, triggering authentication...');
      processAuthentication();
    }
  }, [isClient, ssoUser, ssoLoading, isAuthenticated, authLoading, processAuthentication]);

  // Auth actions
  const login = useCallback(async () => {
    if (ssoUser) {
      await processAuthentication();
    } else {
      setAuthError('No SSO user data available');
    }
  }, [ssoUser, processAuthentication]);

  const logout = useCallback(async () => {
    try {
      const { logout } = await import('@/app/(auth)/actions/auth');
      await logout();
      
      setUser(null);
      setTeams([]);
      setIsAuthenticated(false);
      setAuthError(null);
      
      // Redirect to home page
      window.location.href = '/';
    } catch (error) {
      console.error('Logout failed:', error);
      setAuthError('Logout failed');
    }
  }, []);

  const refreshAuth = useCallback(async () => {
    const success = await refreshToken();
    if (!success) {
      // If refresh fails, try to re-authenticate
      if (ssoUser) {
        await processAuthentication();
      }
    }
  }, [refreshToken, ssoUser, processAuthentication]);

  // Show loading until client-side hydration is complete
  if (!isClient) {
    return (
      <AuthContext.Provider value={{
        user: null,
        teams: [],
        isAuthenticated: false,
        loading: true,
        error: null,
        hasTeamAccess: () => false,
        isTeamAdmin: () => false,
        getTeamRole: () => null,
        login: async () => {},
        logout: async () => {},
        refreshAuth: async () => {},
        lastRefresh: null,
        isRefreshing: false,
      }}>
        {children}
      </AuthContext.Provider>
    );
  }

  // Combine loading states and errors
  const loading = ssoLoading || authLoading;
  const error = ssoError?.message || authError;

  const contextValue: AuthContextType = {
    user,
    teams,
    isAuthenticated,
    loading,
    error,
    hasTeamAccess,
    isTeamAdmin,
    getTeamRole,
    login,
    logout,
    refreshAuth,
    lastRefresh,
    isRefreshing,
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
}

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};

// app/providers/Providers.tsx
'use client';

import { ThemeProvider } from '@/providers/ThemeProvider';
import { AuthProvider } from '@/app/(auth)/providers/AuthProvider';
import { Suspense } from 'react';
import { AuthenticationPage } from '@/app/(auth)/components/AuthenticationPage';


export function Providers({ children }: { children: React.ReactNode }) {
  return (
    <ThemeProvider
      attribute="class"
      defaultTheme="system"
      enableSystem
      disableTransitionOnChange
    >
      <Suspense fallback={<AuthenticationPage />}>
        <AuthProvider>
            {children}
        </AuthProvider>
      </Suspense>
    </ThemeProvider>
  );
}

// /app/layout.tsx

import type { Metadata } from "next";
import "./globals.css";
import { Toaster } from "sonner";
import { bentonSans } from "@/lib/fonts";
import { Providers } from "@/providers/RootProviders";

// import '@/lib/init'; //cron job for email sending

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning className={bentonSans.className}>
      <body className="antialiased" >

          <Providers>
            {children}
            <Toaster />
          </Providers>

      </body>
    </html>
  );
}

