// db/schema/teams.ts

import { pgTable, uuid, varchar, text, timestamp, pgEnum, integer, boolean, index, uniqueIndex } from "drizzle-orm/pg-core";
import { sql } from "drizzle-orm";

// Define enums
export const approvalStatus = pgEnum('approval_status', ['pending', 'approved', 'rejected']);
export const applicationStatus = pgEnum('application_status', [
  'active',
  'inactive',
  'pending',
  'deprecated',
  'maintenance'
]);

// Teams table with enhanced audit fields and constraints
export const teams = pgTable("teams", {
  id: uuid("id").defaultRandom().primaryKey(),
  teamName: varchar("team_name", { length: 100 }).notNull().unique(),
  userGroup: varchar("user_group", { length: 100 }).notNull(),
  adminGroup: varchar("admin_group", { length: 100 }).notNull(),
  contactName: varchar("contact_name", { length: 100 }).notNull(), // Made required
  contactEmail: varchar("contact_email", { length: 255 }).notNull(),
  
  // Audit fields
  isActive: boolean("is_active").notNull().default(true),
  createdBy: varchar("created_by", { length: 255 }).notNull(),
  createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
  updatedBy: varchar("updated_by", { length: 255 }),
  updatedAt: timestamp("updated_at", { withTimezone: true }),
}, (table) => ({
  // Indexes for teams table
  teamNameIdx: uniqueIndex('teams_team_name_idx').on(table.teamName),
  contactEmailIdx: index('teams_contact_email_idx').on(table.contactEmail),
  isActiveIdx: index('teams_is_active_idx').on(table.isActive),
  // Checks
  emailCheck: sql`contact_email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'`,
}));

// Team registration requests table with enhanced tracking
export const teamRegistrationRequests = pgTable("team_registration_requests", {
  id: uuid("id").defaultRandom().primaryKey(),
  teamName: varchar("team_name", { length: 100 }).notNull(),
  userGroup: varchar("user_group", { length: 100 }).notNull(),
  adminGroup: varchar("admin_group", { length: 100 }).notNull(),
  contactName: varchar("contact_name", { length: 100 }).notNull(),
  contactEmail: varchar("contact_email", { length: 255 }).notNull(),
  
  // Approval specific fields
  status: approvalStatus("status").notNull().default('pending'),
  requestedBy: varchar("requested_by", { length: 255 }).notNull(),
  requestedAt: timestamp("requested_at", { withTimezone: true }).defaultNow().notNull(),
  reviewedBy: varchar("reviewed_by", { length: 255 }),
  reviewedAt: timestamp("reviewed_at", { withTimezone: true }),
  comments: text("comments"),

  // Audit fields
  createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
  updatedAt: timestamp("updated_at", { withTimezone: true }),
}, (table) => ({
  // Indexes for registration requests
  statusIdx: index('team_reg_status_idx').on(table.status),
  requestedByIdx: index('team_reg_requested_by_idx').on(table.requestedBy),
  requestedAtIdx: index('team_reg_requested_at_idx').on(table.requestedAt),
  // Composite index for status-based queries
  statusRequestedAtIdx: index('team_reg_status_requested_at_idx').on(table.status, table.requestedAt),
  // Checks
  emailCheck: sql`contact_email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'`,
}));

// Applications table with enhanced validation and relationships
export const applications = pgTable("applications", {
  id: uuid("id").defaultRandom().primaryKey(),
  
  // Team reference with cascade rules
  teamId: uuid("team_id")
    .notNull()
    .references(() => teams.id, { onDelete: 'restrict', onUpdate: 'cascade' }),
  
  // Application details with validation
  carId: varchar("car_id", { length: 50 }).notNull().unique(),
  applicationName: varchar("application_name", { length: 255 }).notNull(),
  tla: varchar("tla", { length: 10 }).notNull(), // Three Letter Acronym
  
  // Leadership information with email validation
  vpName: varchar("vp_name", { length: 100 }).notNull(),
  vpEmail: varchar("vp_email", { length: 255 }).notNull(),
  directorName: varchar("director_name", { length: 100 }).notNull(),
  directorEmail: varchar("director_email", { length: 255 }).notNull(),
  
  // Application metadata with constraints
  tier: integer("tier").notNull(),
  snowGroup: varchar("snow_group", { length: 255 }),
  slackChannel: varchar("slack_channel", { length: 100 }),
  
  // Additional metadata
  description: text("description"),
  status: applicationStatus("status").notNull().default('pending'),
  
  // Audit fields
  createdBy: varchar("created_by", { length: 255 }).notNull(),
  createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
  updatedBy: varchar("updated_by", { length: 255 }).notNull(),
  updatedAt: timestamp("updated_at", { withTimezone: true })
    .defaultNow()
    .notNull(),
}, (table) => ({
  // Indexes for applications
  teamIdIdx: index('applications_team_id_idx').on(table.teamId),
  statusIdx: index('applications_status_idx').on(table.status),
  carIdIdx: uniqueIndex('applications_car_id_idx').on(table.carId),
  tierIdx: index('applications_tier_idx').on(table.tier),
  
  // Composite indexes for common queries
  teamStatusIdx: index('applications_team_status_idx').on(table.teamId, table.status),
  teamStatusCreatedIdx: index('applications_team_status_created_idx')
    .on(table.teamId, table.status, table.createdAt),
  
  // Checks
  tierCheck: sql`tier >= 0 AND tier <= 5`,
  vpEmailCheck: sql`vp_email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'`,
  directorEmailCheck: sql`director_email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'`,
  slackChannelCheck: sql`slack_channel LIKE '#%' OR slack_channel IS NULL`,
}));


Auth Details

  // app/(auth)/actions/auth.ts
'use server';

import { cookies } from 'next/headers';

import { db } from '@/db';
import { teams } from '@/db/schema/teams';
import { eq, or } from 'drizzle-orm';
import type { SSOUser, AuthResponse, TeamAccess } from '@/app/types/auth';
import { getUserTeamAccess } from '../lib/team-utils';
import { StatelessSessionManager } from '../lib/token';

export async function handleSSOCallback(
  userData: SSOUser,
  deviceInfo?: string,
  ipAddress?: string
): Promise<{ success: boolean; error?: string; data?: AuthResponse }> {
  console.log('üöÄ Starting SSO callback for user:', userData.attributes.email);
  
  try {
    // Get user's team access using the shared utility
    const teamAccess = await getUserTeamAccess(userData.attributes.groups);
    console.log('üìä Found team access for', teamAccess.length, 'teams');

    // Create session data
    const sessionData = {
      user: {
        firstName: userData.attributes.firstName,
        lastName: userData.attributes.lastName,
        fullName: userData.attributes.fullName,
        adsId: userData.attributes.adsId,
        guid: userData.attributes.guid,
        employeeId: userData.attributes.employeeId,
        email: userData.attributes.email,
      },
      teams: teamAccess,
      deviceInfo: deviceInfo || 'unknown',
      ipAddress: ipAddress || 'unknown',
    };

    // Create encrypted session tokens
    const tokens = await StatelessSessionManager.createSession(sessionData);
    
    // Set secure HTTP-only cookies
    const cookieStore = await cookies();
    const isProduction = process.env.NODE_ENV === 'production';
    
    cookieStore.set('auth-token', tokens.accessToken, {
      httpOnly: true,
      secure: isProduction,
      sameSite: 'lax',
      path: '/',
      maxAge: 15 * 60, // 15 minutes
    });

    cookieStore.set('refresh-token', tokens.refreshToken, {
      httpOnly: true,
      secure: isProduction,
      sameSite: 'lax',
      path: '/',
      maxAge: 7 * 24 * 60 * 60, // 7 days
    });

    console.log('üç™ Cookies set successfully');

    return {
      success: true,
      data: {
        user: userData,
        teams: teamAccess,
        expiresAt: tokens.expiresAt,
      }
    };
    
  } catch (error) {
    console.error('‚ùå SSO callback error:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Authentication failed' 
    };
  }
}

export async function refreshAuthToken(): Promise<{ success: boolean; error?: string }> {
  try {
    console.log('üîÑ Attempting to refresh auth token...');
    
    const cookieStore = await cookies();
    const refreshToken = cookieStore.get('refresh-token');
    
    if (!refreshToken) {
      console.log('‚ùå No refresh token found');
      return { success: false, error: 'No refresh token found' };
    }

    // Use the StatelessSessionManager to refresh the session
    const result = await StatelessSessionManager.refreshSession(refreshToken.value);
    
    if (!result) {
      console.log('‚ùå Refresh token is invalid or expired');
      // Clear invalid cookies
      cookieStore.delete('auth-token');
      cookieStore.delete('refresh-token');
      return { success: false, error: 'Invalid or expired refresh token' };
    }

    // Set the new access token cookie
    const isProduction = process.env.NODE_ENV === 'production';
    cookieStore.set('auth-token', result.accessToken, {
      httpOnly: true,
      secure: isProduction,
      sameSite: 'lax',
      path: '/',
      maxAge: 15 * 60, // 15 minutes
    });

    console.log('‚úÖ Access token refreshed successfully');
    return { success: true };
    
  } catch (error) {
    console.error('‚ùå Token refresh error:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Token refresh failed' 
    };
  }
}

export async function logout(): Promise<void> {
  try {
    console.log('üö™ Logging out user...');
    const cookieStore = await cookies();
    cookieStore.delete('auth-token');
    cookieStore.delete('refresh-token');
    console.log('‚úÖ User logged out successfully');
  } catch (error) {
    console.error('‚ùå Logout error:', error);
  }
}

// Debug function to check refresh token status
export async function debugRefreshToken(): Promise<{
  hasRefreshToken: boolean;
  refreshTokenValid: boolean;
  error?: string;
}> {
  try {
    const cookieStore = await cookies();
    const refreshToken = cookieStore.get('refresh-token');
    
    if (!refreshToken) {
      return { hasRefreshToken: false, refreshTokenValid: false };
    }

    const result = await StatelessSessionManager.refreshSession(refreshToken.value);
    
    return {
      hasRefreshToken: true,
      refreshTokenValid: !!result,
    };
  } catch (error) {
    return {
      hasRefreshToken: true,
      refreshTokenValid: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}


// app/(auth)/components/AuthProvider.tsx
'use client';

import { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { useSSOPolicy } from '@/app/(auth)/hooks/useSSOPolicy';
import { useTokenRefresh } from '@/app/(auth)/hooks/useRefreshToken';
import type { FormattedUser, FormattedTeam } from '@/app/(auth)/lib/auth';
import { handleSSOCallback } from '@/app/(auth)/actions/auth';

type AuthContextType = {
  user: FormattedUser | null;
  teams: FormattedTeam[];
  isAuthenticated: boolean;
  loading: boolean;
  error: string | null;
  hasTeamAccess: (teamId: string) => boolean;
  isTeamAdmin: (teamId: string) => boolean;
  getTeamRole: (teamId: string) => 'admin' | 'user' | null;
  login: () => Promise<void>;
  logout: () => Promise<void>;
  refreshAuth: () => Promise<void>;
  lastRefresh: Date | null;
  isRefreshing: boolean;
};

const AuthContext = createContext<AuthContextType | null>(null);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  // SSO hook for fetching user data
  const { user: ssoUser, loading: ssoLoading, error: ssoError } = useSSOPolicy();
  
  // Token refresh hook
  const { refreshToken, isRefreshing, lastRefresh } = useTokenRefresh();
  
  // Auth state
  const [user, setUser] = useState<FormattedUser | null>(null);
  const [teams, setTeams] = useState<FormattedTeam[]>([]);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [authLoading, setAuthLoading] = useState(false);
  const [authError, setAuthError] = useState<string | null>(null);
  const [isClient, setIsClient] = useState(false);

  // Ensure we're client-side before doing anything
  useEffect(() => {
    setIsClient(true);
  }, []);

  // Helper functions
  const hasTeamAccess = useCallback((teamId: string) => {
    return teams.some(team => team.id === teamId);
  }, [teams]);

  const isTeamAdmin = useCallback((teamId: string) => {
    return teams.some(team => team.id === teamId && team.role === 'admin');
  }, [teams]);

  const getTeamRole = useCallback((teamId: string) => {
    const team = teams.find(team => team.id === teamId);
    return team?.role || null;
  }, [teams]);

  // Process SSO authentication
  const processAuthentication = useCallback(async () => {
    if (!ssoUser) return;

    setAuthLoading(true);
    setAuthError(null);

    try {
      const deviceInfo = navigator.userAgent;
      const result = await handleSSOCallback(ssoUser, deviceInfo);
      
      if (result.success && result.data) {
        // Map the response to our formatted types
        const formattedUser: FormattedUser = {
          id: result.data.user.attributes.employeeId,
          name: result.data.user.attributes.fullName,
          email: result.data.user.attributes.email,
          firstName: result.data.user.attributes.firstName,
          lastName: result.data.user.attributes.lastName,
          employeeId: result.data.user.attributes.employeeId,
          adsId: result.data.user.attributes.adsId,
          image: undefined,
        };

        const formattedTeams: FormattedTeam[] = result.data.teams.map(team => ({
          id: team.teamId,
          name: team.teamName,
          role: team.role,
        }));

        setUser(formattedUser);
        setTeams(formattedTeams);
        setIsAuthenticated(true);
        
        console.log('‚úÖ Authentication successful:', formattedUser.name);
        console.log('üë• User teams:', formattedTeams.length);
      } else {
        throw new Error(result.error || 'Authentication failed');
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Authentication failed';
      setAuthError(errorMessage);
      setIsAuthenticated(false);
      setUser(null);
      setTeams([]);
      console.error('‚ùå Authentication error:', errorMessage);
    } finally {
      setAuthLoading(false);
    }
  }, [ssoUser]);

  // Handle SSO user changes
  useEffect(() => {
    if (isClient && ssoUser && !ssoLoading && !isAuthenticated && !authLoading) {
      console.log('üîÑ SSO user available, triggering authentication...');
      processAuthentication();
    }
  }, [isClient, ssoUser, ssoLoading, isAuthenticated, authLoading, processAuthentication]);

  // Auth actions
  const login = useCallback(async () => {
    if (ssoUser) {
      await processAuthentication();
    } else {
      setAuthError('No SSO user data available');
    }
  }, [ssoUser, processAuthentication]);

  const logout = useCallback(async () => {
    try {
      const { logout } = await import('@/app/(auth)/actions/auth');
      await logout();
      
      setUser(null);
      setTeams([]);
      setIsAuthenticated(false);
      setAuthError(null);
      
      // Redirect to home page
      window.location.href = '/';
    } catch (error) {
      console.error('Logout failed:', error);
      setAuthError('Logout failed');
    }
  }, []);

  const refreshAuth = useCallback(async () => {
    const success = await refreshToken();
    if (!success) {
      // If refresh fails, try to re-authenticate
      if (ssoUser) {
        await processAuthentication();
      }
    }
  }, [refreshToken, ssoUser, processAuthentication]);

  // Show loading until client-side hydration is complete
  if (!isClient) {
    return (
      <AuthContext.Provider value={{
        user: null,
        teams: [],
        isAuthenticated: false,
        loading: true,
        error: null,
        hasTeamAccess: () => false,
        isTeamAdmin: () => false,
        getTeamRole: () => null,
        login: async () => {},
        logout: async () => {},
        refreshAuth: async () => {},
        lastRefresh: null,
        isRefreshing: false,
      }}>
        {children}
      </AuthContext.Provider>
    );
  }

  // Combine loading states and errors
  const loading = ssoLoading || authLoading;
  const error = ssoError?.message || authError;

  const contextValue: AuthContextType = {
    user,
    teams,
    isAuthenticated,
    loading,
    error,
    hasTeamAccess,
    isTeamAdmin,
    getTeamRole,
    login,
    logout,
    refreshAuth,
    lastRefresh,
    isRefreshing,
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
}

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};


// app/(auth)/lib/auth.ts
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import { StatelessSessionManager, type SessionPayload } from '@/app/(auth)/lib/token';
import type { TeamAccess } from '@/app/types/auth';

export type AuthUser = {
  user: SessionPayload | null;
  isAuthenticated: boolean;
};

export type FormattedUser = {
  id: string;
  name: string;
  email: string;
  firstName: string;
  lastName: string;
  employeeId: string;
  adsId: string;
  image?: string;
};

export type FormattedTeam = {
  id: string;
  name: string;
  role: 'admin' | 'user';
};

/**
 * Gets the authenticated user from the encrypted JWT token (READ-ONLY)
 * @param redirectOnFailure - Whether to redirect to home page on auth failure
 * @returns The authenticated user or null
 */
export async function getServerUser(redirectOnFailure = true): Promise<AuthUser> {
  try {
    const cookieStore = await cookies();
    const authToken = cookieStore.get('auth-token');

    if (!authToken) {
      if (redirectOnFailure) redirect('/');
      return { user: null, isAuthenticated: false };
    }

    const sessionData = await StatelessSessionManager.verifySession(authToken.value);
    
    if (!sessionData) {
      if (redirectOnFailure) redirect('/');
      return { user: null, isAuthenticated: false };
    }

    // DON'T update cookies here - just return the session data
    return { user: sessionData, isAuthenticated: true };
    
  } catch (error) {
    console.error('Auth error:', error);
    if (redirectOnFailure) redirect('/');
    return { user: null, isAuthenticated: false };
  }
}

/**
 * Get formatted user data for UI components (READ-ONLY)
 */
export async function getFormattedUserData(): Promise<{
  user: FormattedUser | null;
  teams: FormattedTeam[];
  isAuthenticated: boolean;
}> {
  const { user: sessionUser, isAuthenticated } = await getServerUser(false);

  if (!isAuthenticated || !sessionUser) {
    return {
      user: null,
      teams: [],
      isAuthenticated: false,
    };
  }

  const formattedUser: FormattedUser = {
    id: sessionUser.user.employeeId,
    name: sessionUser.user.fullName,
    email: sessionUser.user.email,
    firstName: sessionUser.user.firstName,
    lastName: sessionUser.user.lastName,
    employeeId: sessionUser.user.employeeId,
    adsId: sessionUser.user.adsId,
    image: undefined,
  };

  const formattedTeams: FormattedTeam[] = sessionUser.teams.map(team => ({
    id: team.teamId,
    name: team.teamName,
    role: team.role,
  }));

  return {
    user: formattedUser,
    teams: formattedTeams,
    isAuthenticated: true,
  };
}

/**
 * Middleware to ensure user is authenticated
 */
export async function requireAuth(): Promise<SessionPayload> {
  const { user, isAuthenticated } = await getServerUser(true);
  
  if (!isAuthenticated || !user) {
    redirect('/');
  }

  return user;
}

/**
 * Check if user is authenticated without redirecting
 */
export async function checkAuth(): Promise<boolean> {
  const { isAuthenticated } = await getServerUser(false);
  return isAuthenticated;
}

/**
 * Check if user has access to a specific team
 */
export async function checkTeamAccess(teamId: string): Promise<{
  hasAccess: boolean;
  role?: 'admin' | 'user';
}> {
  const { user } = await getServerUser(false);
  
  if (!user) {
    return { hasAccess: false };
  }

  const teamAccess = user.teams.find(team => team.teamId === teamId);
  
  return {
    hasAccess: !!teamAccess,
    role: teamAccess?.role,
  };
}

/**
 * Require team access for a specific team
 */
export async function requireTeamAccess(teamId: string): Promise<{
  user: SessionPayload;
  role: 'admin' | 'user';
}> {
  const user = await requireAuth();
  const teamAccess = user.teams.find(team => team.teamId === teamId);
  
  if (!teamAccess) {
    redirect('/unauthorized');
  }

  return {
    user,
    role: teamAccess.role,
  };
}